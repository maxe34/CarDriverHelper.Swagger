// <auto-generated />
using System;
using CarDriverHelper.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarDriverHelper.Repositories.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarDriverHelper.Repositories.Entities.CoffeeShop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CoffeeShops");
                });

            modelBuilder.Entity("CarDriverHelper.Repositories.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CarDriverHelper.Repositories.Entities.GasStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CarWash")
                        .HasColumnType("bit");

                    b.Property<bool>("Coffee")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CoffeeShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DieselPrice")
                        .HasColumnType("float");

                    b.Property<double>("GasolinePrice")
                        .HasColumnType("float");

                    b.Property<double?>("GplPrice")
                        .HasColumnType("float");

                    b.Property<bool>("Market")
                        .HasColumnType("bit");

                    b.Property<double?>("MetanPrice")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeShopId");

                    b.HasIndex("CompanyId");

                    b.ToTable("GasStations");
                });

            modelBuilder.Entity("CarDriverHelper.Repositories.Entities.GasStation", b =>
                {
                    b.HasOne("CarDriverHelper.Repositories.Entities.CoffeeShop", "CoffeeShop")
                        .WithMany()
                        .HasForeignKey("CoffeeShopId");

                    b.HasOne("CarDriverHelper.Repositories.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeeShop");

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
